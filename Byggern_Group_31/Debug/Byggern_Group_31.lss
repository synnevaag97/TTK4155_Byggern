
Byggern_Group_31.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f0  00800100  00000cc0  00000d54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cc0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008001f0  008001f0  00000e44  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e44  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ea0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ec  00000000  00000000  00000f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f7  00000000  00000000  00001950  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004a1  00000000  00000000  00002147  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  000025e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000411  00000000  00000000  00002718  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f6  00000000  00000000  00002b29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002d1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e0 ec       	ldi	r30, 0xC0	; 192
  84:	fc e0       	ldi	r31, 0x0C	; 12
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a0 3f       	cpi	r26, 0xF0	; 240
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a0 ef       	ldi	r26, 0xF0	; 240
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	aa 3f       	cpi	r26, 0xFA	; 250
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 57 00 	call	0xae	; 0xae <main>
  a6:	0c 94 5e 06 	jmp	0xcbc	; 0xcbc <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <main>:
#include "UART.h"
#include "SRAM.h"

int main(void)
{
	UART_init();
  ae:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <UART_init>
	SRAM_init();
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <SRAM_init>
	DDRA |= (1<<DDA0);
  b6:	d0 9a       	sbi	0x1a, 0	; 26
	//unsigned int tall = 0;
	while(1){
		SRAM_test();
  b8:	0e 94 69 00 	call	0xd2	; 0xd2 <SRAM_test>
  bc:	fd cf       	rjmp	.-6      	; 0xb8 <main+0xa>

000000be <SRAM_init>:
}
uint8_t SRAM_read(int index){
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint8_t retreived_value = ext_ram[index];
	return retreived_value;
}
  be:	85 b7       	in	r24, 0x35	; 53
  c0:	80 68       	ori	r24, 0x80	; 128
  c2:	85 bf       	out	0x35, r24	; 53
  c4:	86 b7       	in	r24, 0x36	; 54
  c6:	84 60       	ori	r24, 0x04	; 4
  c8:	86 bf       	out	0x36, r24	; 54
  ca:	80 b7       	in	r24, 0x30	; 48
  cc:	80 62       	ori	r24, 0x20	; 32
  ce:	80 bf       	out	0x30, r24	; 48
  d0:	08 95       	ret

000000d2 <SRAM_test>:

void SRAM_test(void)
{
  d2:	cf 92       	push	r12
  d4:	df 92       	push	r13
  d6:	ef 92       	push	r14
  d8:	ff 92       	push	r15
  da:	0f 93       	push	r16
  dc:	1f 93       	push	r17
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\n");
  e2:	8a e0       	ldi	r24, 0x0A	; 10
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	0e 94 bf 01 	call	0x37e	; 0x37e <puts>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
  ea:	0e 94 4e 01 	call	0x29c	; 0x29c <rand>
  ee:	7c 01       	movw	r14, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
  f0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
  f4:	c1 2c       	mov	r12, r1
  f6:	d1 2c       	mov	r13, r1

void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
  f8:	00 e0       	ldi	r16, 0x00	; 0
  fa:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		ext_ram[i] = some_value;
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
  fc:	c0 e2       	ldi	r28, 0x20	; 32
  fe:	d1 e0       	ldi	r29, 0x01	; 1
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
 100:	0e 94 4e 01 	call	0x29c	; 0x29c <rand>
 104:	f6 01       	movw	r30, r12
 106:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
 108:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
 10a:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
 10c:	28 17       	cp	r18, r24
 10e:	a9 f0       	breq	.+42     	; 0x13a <SRAM_test+0x68>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
 110:	99 27       	eor	r25, r25
 112:	9f 93       	push	r25
 114:	8f 93       	push	r24
 116:	1f 92       	push	r1
 118:	2f 93       	push	r18
 11a:	df 92       	push	r13
 11c:	cf 92       	push	r12
 11e:	df 93       	push	r29
 120:	cf 93       	push	r28
 122:	0e 94 a9 01 	call	0x352	; 0x352 <printf>
			write_errors++;
 126:	0f 5f       	subi	r16, 0xFF	; 255
 128:	1f 4f       	sbci	r17, 0xFF	; 255
 12a:	8d b7       	in	r24, 0x3d	; 61
 12c:	9e b7       	in	r25, 0x3e	; 62
 12e:	08 96       	adiw	r24, 0x08	; 8
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	f8 94       	cli
 134:	9e bf       	out	0x3e, r25	; 62
 136:	0f be       	out	0x3f, r0	; 63
 138:	8d bf       	out	0x3d, r24	; 61
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 13a:	9f ef       	ldi	r25, 0xFF	; 255
 13c:	c9 1a       	sub	r12, r25
 13e:	d9 0a       	sbc	r13, r25
 140:	c1 14       	cp	r12, r1
 142:	88 e0       	ldi	r24, 0x08	; 8
 144:	d8 06       	cpc	r13, r24
 146:	e1 f6       	brne	.-72     	; 0x100 <SRAM_test+0x2e>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
 148:	c7 01       	movw	r24, r14
 14a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <srand>
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 14e:	c0 e0       	ldi	r28, 0x00	; 0
 150:	d0 e0       	ldi	r29, 0x00	; 0
void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
 152:	e1 2c       	mov	r14, r1
 154:	f1 2c       	mov	r15, r1
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
 156:	0f 2e       	mov	r0, r31
 158:	f9 e5       	ldi	r31, 0x59	; 89
 15a:	cf 2e       	mov	r12, r31
 15c:	f1 e0       	ldi	r31, 0x01	; 1
 15e:	df 2e       	mov	r13, r31
 160:	f0 2d       	mov	r31, r0
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
 162:	0e 94 4e 01 	call	0x29c	; 0x29c <rand>
 166:	fe 01       	movw	r30, r28
 168:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
 16a:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
 16c:	28 17       	cp	r18, r24
 16e:	b1 f0       	breq	.+44     	; 0x19c <SRAM_test+0xca>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
 170:	99 27       	eor	r25, r25
 172:	9f 93       	push	r25
 174:	8f 93       	push	r24
 176:	1f 92       	push	r1
 178:	2f 93       	push	r18
 17a:	df 93       	push	r29
 17c:	cf 93       	push	r28
 17e:	df 92       	push	r13
 180:	cf 92       	push	r12
 182:	0e 94 a9 01 	call	0x352	; 0x352 <printf>
			retrieval_errors++;
 186:	9f ef       	ldi	r25, 0xFF	; 255
 188:	e9 1a       	sub	r14, r25
 18a:	f9 0a       	sbc	r15, r25
 18c:	8d b7       	in	r24, 0x3d	; 61
 18e:	9e b7       	in	r25, 0x3e	; 62
 190:	08 96       	adiw	r24, 0x08	; 8
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	f8 94       	cli
 196:	9e bf       	out	0x3e, r25	; 62
 198:	0f be       	out	0x3f, r0	; 63
 19a:	8d bf       	out	0x3d, r24	; 61
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 19c:	21 96       	adiw	r28, 0x01	; 1
 19e:	c1 15       	cp	r28, r1
 1a0:	98 e0       	ldi	r25, 0x08	; 8
 1a2:	d9 07       	cpc	r29, r25
 1a4:	f1 f6       	brne	.-68     	; 0x162 <SRAM_test+0x90>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
 1a6:	ff 92       	push	r15
 1a8:	ef 92       	push	r14
 1aa:	1f 93       	push	r17
 1ac:	0f 93       	push	r16
 1ae:	86 e9       	ldi	r24, 0x96	; 150
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	9f 93       	push	r25
 1b4:	8f 93       	push	r24
 1b6:	0e 94 a9 01 	call	0x352	; 0x352 <printf>
 1ba:	0f 90       	pop	r0
 1bc:	0f 90       	pop	r0
 1be:	0f 90       	pop	r0
 1c0:	0f 90       	pop	r0
 1c2:	0f 90       	pop	r0
 1c4:	0f 90       	pop	r0
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	1f 91       	pop	r17
 1cc:	0f 91       	pop	r16
 1ce:	ff 90       	pop	r15
 1d0:	ef 90       	pop	r14
 1d2:	df 90       	pop	r13
 1d4:	cf 90       	pop	r12
 1d6:	08 95       	ret

000001d8 <UART_transmit>:
 */ 

#include "UART.h"

void UART_transmit(unsigned char data){
	loop_until_bit_is_set(UCSR0A, UDRE0);
 1d8:	5d 9b       	sbis	0x0b, 5	; 11
 1da:	fe cf       	rjmp	.-4      	; 0x1d8 <UART_transmit>
	UDR0 = data;
 1dc:	8c b9       	out	0x0c, r24	; 12
 1de:	08 95       	ret

000001e0 <UART_receive>:
}

unsigned char UART_receive(void){
	loop_until_bit_is_set(UCSR0A, RXC0);
 1e0:	5f 9b       	sbis	0x0b, 7	; 11
 1e2:	fe cf       	rjmp	.-4      	; 0x1e0 <UART_receive>
	return UDR0;
 1e4:	8c b1       	in	r24, 0x0c	; 12
}
 1e6:	08 95       	ret

000001e8 <UART_init>:

void UART_init(){
	
	// UBRR : USART Baud rate register
	unsigned int ubrr = UBRR;
	UBRR0H = (unsigned char) (ubrr>>8);
 1e8:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (unsigned char) ubrr;
 1ea:	8f e1       	ldi	r24, 0x1F	; 31
 1ec:	89 b9       	out	0x09, r24	; 9
	
	//stop bit, set frame format 8bit packages
	// USBS0 : Stop bit register
	// UCSZ00 set 8 bit format
	UCSR0C = (1<<URSEL0)|(1 << USBS0) | (3 << UCSZ00);
 1ee:	8e e8       	ldi	r24, 0x8E	; 142
 1f0:	80 bd       	out	0x20, r24	; 32
	
	// Enable Transmitter and Receiver
	UCSR0B = (1<<TXEN0)|(1<<RXEN0);
 1f2:	88 e1       	ldi	r24, 0x18	; 24
 1f4:	8a b9       	out	0x0a, r24	; 10
	
	fdevopen(UART_transmit, UART_receive);
 1f6:	60 ef       	ldi	r22, 0xF0	; 240
 1f8:	70 e0       	ldi	r23, 0x00	; 0
 1fa:	8c ee       	ldi	r24, 0xEC	; 236
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 5e 01 	call	0x2bc	; 0x2bc <fdevopen>
 202:	08 95       	ret

00000204 <do_rand>:
 204:	8f 92       	push	r8
 206:	9f 92       	push	r9
 208:	af 92       	push	r10
 20a:	bf 92       	push	r11
 20c:	cf 92       	push	r12
 20e:	df 92       	push	r13
 210:	ef 92       	push	r14
 212:	ff 92       	push	r15
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	ec 01       	movw	r28, r24
 21a:	68 81       	ld	r22, Y
 21c:	79 81       	ldd	r23, Y+1	; 0x01
 21e:	8a 81       	ldd	r24, Y+2	; 0x02
 220:	9b 81       	ldd	r25, Y+3	; 0x03
 222:	61 15       	cp	r22, r1
 224:	71 05       	cpc	r23, r1
 226:	81 05       	cpc	r24, r1
 228:	91 05       	cpc	r25, r1
 22a:	21 f4       	brne	.+8      	; 0x234 <do_rand+0x30>
 22c:	64 e2       	ldi	r22, 0x24	; 36
 22e:	79 ed       	ldi	r23, 0xD9	; 217
 230:	8b e5       	ldi	r24, 0x5B	; 91
 232:	97 e0       	ldi	r25, 0x07	; 7
 234:	2d e1       	ldi	r18, 0x1D	; 29
 236:	33 ef       	ldi	r19, 0xF3	; 243
 238:	41 e0       	ldi	r20, 0x01	; 1
 23a:	50 e0       	ldi	r21, 0x00	; 0
 23c:	0e 94 c4 05 	call	0xb88	; 0xb88 <__divmodsi4>
 240:	49 01       	movw	r8, r18
 242:	5a 01       	movw	r10, r20
 244:	9b 01       	movw	r18, r22
 246:	ac 01       	movw	r20, r24
 248:	a7 ea       	ldi	r26, 0xA7	; 167
 24a:	b1 e4       	ldi	r27, 0x41	; 65
 24c:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__muluhisi3>
 250:	6b 01       	movw	r12, r22
 252:	7c 01       	movw	r14, r24
 254:	ac ee       	ldi	r26, 0xEC	; 236
 256:	b4 ef       	ldi	r27, 0xF4	; 244
 258:	a5 01       	movw	r20, r10
 25a:	94 01       	movw	r18, r8
 25c:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__mulohisi3>
 260:	dc 01       	movw	r26, r24
 262:	cb 01       	movw	r24, r22
 264:	8c 0d       	add	r24, r12
 266:	9d 1d       	adc	r25, r13
 268:	ae 1d       	adc	r26, r14
 26a:	bf 1d       	adc	r27, r15
 26c:	b7 ff       	sbrs	r27, 7
 26e:	03 c0       	rjmp	.+6      	; 0x276 <do_rand+0x72>
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	a1 09       	sbc	r26, r1
 274:	b0 48       	sbci	r27, 0x80	; 128
 276:	88 83       	st	Y, r24
 278:	99 83       	std	Y+1, r25	; 0x01
 27a:	aa 83       	std	Y+2, r26	; 0x02
 27c:	bb 83       	std	Y+3, r27	; 0x03
 27e:	9f 77       	andi	r25, 0x7F	; 127
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	ff 90       	pop	r15
 286:	ef 90       	pop	r14
 288:	df 90       	pop	r13
 28a:	cf 90       	pop	r12
 28c:	bf 90       	pop	r11
 28e:	af 90       	pop	r10
 290:	9f 90       	pop	r9
 292:	8f 90       	pop	r8
 294:	08 95       	ret

00000296 <rand_r>:
 296:	0e 94 02 01 	call	0x204	; 0x204 <do_rand>
 29a:	08 95       	ret

0000029c <rand>:
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	0e 94 02 01 	call	0x204	; 0x204 <do_rand>
 2a4:	08 95       	ret

000002a6 <srand>:
 2a6:	a0 e0       	ldi	r26, 0x00	; 0
 2a8:	b0 e0       	ldi	r27, 0x00	; 0
 2aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2ae:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 2b2:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 2b6:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 2ba:	08 95       	ret

000002bc <fdevopen>:
 2bc:	0f 93       	push	r16
 2be:	1f 93       	push	r17
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	00 97       	sbiw	r24, 0x00	; 0
 2c6:	31 f4       	brne	.+12     	; 0x2d4 <fdevopen+0x18>
 2c8:	61 15       	cp	r22, r1
 2ca:	71 05       	cpc	r23, r1
 2cc:	19 f4       	brne	.+6      	; 0x2d4 <fdevopen+0x18>
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	3a c0       	rjmp	.+116    	; 0x348 <fdevopen+0x8c>
 2d4:	8b 01       	movw	r16, r22
 2d6:	ec 01       	movw	r28, r24
 2d8:	6e e0       	ldi	r22, 0x0E	; 14
 2da:	70 e0       	ldi	r23, 0x00	; 0
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <calloc>
 2e4:	fc 01       	movw	r30, r24
 2e6:	89 2b       	or	r24, r25
 2e8:	91 f3       	breq	.-28     	; 0x2ce <fdevopen+0x12>
 2ea:	80 e8       	ldi	r24, 0x80	; 128
 2ec:	83 83       	std	Z+3, r24	; 0x03
 2ee:	01 15       	cp	r16, r1
 2f0:	11 05       	cpc	r17, r1
 2f2:	71 f0       	breq	.+28     	; 0x310 <fdevopen+0x54>
 2f4:	13 87       	std	Z+11, r17	; 0x0b
 2f6:	02 87       	std	Z+10, r16	; 0x0a
 2f8:	81 e8       	ldi	r24, 0x81	; 129
 2fa:	83 83       	std	Z+3, r24	; 0x03
 2fc:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <__data_end>
 300:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <__data_end+0x1>
 304:	89 2b       	or	r24, r25
 306:	21 f4       	brne	.+8      	; 0x310 <fdevopen+0x54>
 308:	f0 93 f1 01 	sts	0x01F1, r31	; 0x8001f1 <__data_end+0x1>
 30c:	e0 93 f0 01 	sts	0x01F0, r30	; 0x8001f0 <__data_end>
 310:	20 97       	sbiw	r28, 0x00	; 0
 312:	c9 f0       	breq	.+50     	; 0x346 <fdevopen+0x8a>
 314:	d1 87       	std	Z+9, r29	; 0x09
 316:	c0 87       	std	Z+8, r28	; 0x08
 318:	83 81       	ldd	r24, Z+3	; 0x03
 31a:	82 60       	ori	r24, 0x02	; 2
 31c:	83 83       	std	Z+3, r24	; 0x03
 31e:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <__data_end+0x2>
 322:	90 91 f3 01 	lds	r25, 0x01F3	; 0x8001f3 <__data_end+0x3>
 326:	89 2b       	or	r24, r25
 328:	71 f4       	brne	.+28     	; 0x346 <fdevopen+0x8a>
 32a:	f0 93 f3 01 	sts	0x01F3, r31	; 0x8001f3 <__data_end+0x3>
 32e:	e0 93 f2 01 	sts	0x01F2, r30	; 0x8001f2 <__data_end+0x2>
 332:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <__data_end+0x4>
 336:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <__data_end+0x5>
 33a:	89 2b       	or	r24, r25
 33c:	21 f4       	brne	.+8      	; 0x346 <fdevopen+0x8a>
 33e:	f0 93 f5 01 	sts	0x01F5, r31	; 0x8001f5 <__data_end+0x5>
 342:	e0 93 f4 01 	sts	0x01F4, r30	; 0x8001f4 <__data_end+0x4>
 346:	cf 01       	movw	r24, r30
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	1f 91       	pop	r17
 34e:	0f 91       	pop	r16
 350:	08 95       	ret

00000352 <printf>:
 352:	a0 e0       	ldi	r26, 0x00	; 0
 354:	b0 e0       	ldi	r27, 0x00	; 0
 356:	ef ea       	ldi	r30, 0xAF	; 175
 358:	f1 e0       	ldi	r31, 0x01	; 1
 35a:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <__prologue_saves__+0x20>
 35e:	ae 01       	movw	r20, r28
 360:	4b 5f       	subi	r20, 0xFB	; 251
 362:	5f 4f       	sbci	r21, 0xFF	; 255
 364:	fa 01       	movw	r30, r20
 366:	61 91       	ld	r22, Z+
 368:	71 91       	ld	r23, Z+
 36a:	af 01       	movw	r20, r30
 36c:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <__data_end+0x2>
 370:	90 91 f3 01 	lds	r25, 0x01F3	; 0x8001f3 <__data_end+0x3>
 374:	0e 94 ef 01 	call	0x3de	; 0x3de <vfprintf>
 378:	e2 e0       	ldi	r30, 0x02	; 2
 37a:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__epilogue_restores__+0x20>

0000037e <puts>:
 37e:	0f 93       	push	r16
 380:	1f 93       	push	r17
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <__data_end+0x2>
 38a:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <__data_end+0x3>
 38e:	23 81       	ldd	r18, Z+3	; 0x03
 390:	21 ff       	sbrs	r18, 1
 392:	1b c0       	rjmp	.+54     	; 0x3ca <puts+0x4c>
 394:	8c 01       	movw	r16, r24
 396:	d0 e0       	ldi	r29, 0x00	; 0
 398:	c0 e0       	ldi	r28, 0x00	; 0
 39a:	f8 01       	movw	r30, r16
 39c:	81 91       	ld	r24, Z+
 39e:	8f 01       	movw	r16, r30
 3a0:	60 91 f2 01 	lds	r22, 0x01F2	; 0x8001f2 <__data_end+0x2>
 3a4:	70 91 f3 01 	lds	r23, 0x01F3	; 0x8001f3 <__data_end+0x3>
 3a8:	db 01       	movw	r26, r22
 3aa:	18 96       	adiw	r26, 0x08	; 8
 3ac:	ed 91       	ld	r30, X+
 3ae:	fc 91       	ld	r31, X
 3b0:	19 97       	sbiw	r26, 0x09	; 9
 3b2:	88 23       	and	r24, r24
 3b4:	31 f0       	breq	.+12     	; 0x3c2 <puts+0x44>
 3b6:	09 95       	icall
 3b8:	89 2b       	or	r24, r25
 3ba:	79 f3       	breq	.-34     	; 0x39a <puts+0x1c>
 3bc:	df ef       	ldi	r29, 0xFF	; 255
 3be:	cf ef       	ldi	r28, 0xFF	; 255
 3c0:	ec cf       	rjmp	.-40     	; 0x39a <puts+0x1c>
 3c2:	8a e0       	ldi	r24, 0x0A	; 10
 3c4:	09 95       	icall
 3c6:	89 2b       	or	r24, r25
 3c8:	19 f0       	breq	.+6      	; 0x3d0 <puts+0x52>
 3ca:	8f ef       	ldi	r24, 0xFF	; 255
 3cc:	9f ef       	ldi	r25, 0xFF	; 255
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <puts+0x56>
 3d0:	8d 2f       	mov	r24, r29
 3d2:	9c 2f       	mov	r25, r28
 3d4:	df 91       	pop	r29
 3d6:	cf 91       	pop	r28
 3d8:	1f 91       	pop	r17
 3da:	0f 91       	pop	r16
 3dc:	08 95       	ret

000003de <vfprintf>:
 3de:	ab e0       	ldi	r26, 0x0B	; 11
 3e0:	b0 e0       	ldi	r27, 0x00	; 0
 3e2:	e5 ef       	ldi	r30, 0xF5	; 245
 3e4:	f1 e0       	ldi	r31, 0x01	; 1
 3e6:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__prologue_saves__>
 3ea:	6c 01       	movw	r12, r24
 3ec:	7b 01       	movw	r14, r22
 3ee:	8a 01       	movw	r16, r20
 3f0:	fc 01       	movw	r30, r24
 3f2:	17 82       	std	Z+7, r1	; 0x07
 3f4:	16 82       	std	Z+6, r1	; 0x06
 3f6:	83 81       	ldd	r24, Z+3	; 0x03
 3f8:	81 ff       	sbrs	r24, 1
 3fa:	cc c1       	rjmp	.+920    	; 0x794 <__stack+0x295>
 3fc:	ce 01       	movw	r24, r28
 3fe:	01 96       	adiw	r24, 0x01	; 1
 400:	3c 01       	movw	r6, r24
 402:	f6 01       	movw	r30, r12
 404:	93 81       	ldd	r25, Z+3	; 0x03
 406:	f7 01       	movw	r30, r14
 408:	93 fd       	sbrc	r25, 3
 40a:	85 91       	lpm	r24, Z+
 40c:	93 ff       	sbrs	r25, 3
 40e:	81 91       	ld	r24, Z+
 410:	7f 01       	movw	r14, r30
 412:	88 23       	and	r24, r24
 414:	09 f4       	brne	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 416:	ba c1       	rjmp	.+884    	; 0x78c <__stack+0x28d>
 418:	85 32       	cpi	r24, 0x25	; 37
 41a:	39 f4       	brne	.+14     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 41c:	93 fd       	sbrc	r25, 3
 41e:	85 91       	lpm	r24, Z+
 420:	93 ff       	sbrs	r25, 3
 422:	81 91       	ld	r24, Z+
 424:	7f 01       	movw	r14, r30
 426:	85 32       	cpi	r24, 0x25	; 37
 428:	29 f4       	brne	.+10     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 42a:	b6 01       	movw	r22, r12
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	0e 94 2a 05 	call	0xa54	; 0xa54 <fputc>
 432:	e7 cf       	rjmp	.-50     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 434:	91 2c       	mov	r9, r1
 436:	21 2c       	mov	r2, r1
 438:	31 2c       	mov	r3, r1
 43a:	ff e1       	ldi	r31, 0x1F	; 31
 43c:	f3 15       	cp	r31, r3
 43e:	d8 f0       	brcs	.+54     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 440:	8b 32       	cpi	r24, 0x2B	; 43
 442:	79 f0       	breq	.+30     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 444:	38 f4       	brcc	.+14     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 446:	80 32       	cpi	r24, 0x20	; 32
 448:	79 f0       	breq	.+30     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 44a:	83 32       	cpi	r24, 0x23	; 35
 44c:	a1 f4       	brne	.+40     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 44e:	23 2d       	mov	r18, r3
 450:	20 61       	ori	r18, 0x10	; 16
 452:	1d c0       	rjmp	.+58     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 454:	8d 32       	cpi	r24, 0x2D	; 45
 456:	61 f0       	breq	.+24     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 458:	80 33       	cpi	r24, 0x30	; 48
 45a:	69 f4       	brne	.+26     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 45c:	23 2d       	mov	r18, r3
 45e:	21 60       	ori	r18, 0x01	; 1
 460:	16 c0       	rjmp	.+44     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 462:	83 2d       	mov	r24, r3
 464:	82 60       	ori	r24, 0x02	; 2
 466:	38 2e       	mov	r3, r24
 468:	e3 2d       	mov	r30, r3
 46a:	e4 60       	ori	r30, 0x04	; 4
 46c:	3e 2e       	mov	r3, r30
 46e:	2a c0       	rjmp	.+84     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 470:	f3 2d       	mov	r31, r3
 472:	f8 60       	ori	r31, 0x08	; 8
 474:	1d c0       	rjmp	.+58     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 476:	37 fc       	sbrc	r3, 7
 478:	2d c0       	rjmp	.+90     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 47a:	20 ed       	ldi	r18, 0xD0	; 208
 47c:	28 0f       	add	r18, r24
 47e:	2a 30       	cpi	r18, 0x0A	; 10
 480:	40 f0       	brcs	.+16     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 482:	8e 32       	cpi	r24, 0x2E	; 46
 484:	b9 f4       	brne	.+46     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 486:	36 fc       	sbrc	r3, 6
 488:	81 c1       	rjmp	.+770    	; 0x78c <__stack+0x28d>
 48a:	23 2d       	mov	r18, r3
 48c:	20 64       	ori	r18, 0x40	; 64
 48e:	32 2e       	mov	r3, r18
 490:	19 c0       	rjmp	.+50     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 492:	36 fe       	sbrs	r3, 6
 494:	06 c0       	rjmp	.+12     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 496:	8a e0       	ldi	r24, 0x0A	; 10
 498:	98 9e       	mul	r9, r24
 49a:	20 0d       	add	r18, r0
 49c:	11 24       	eor	r1, r1
 49e:	92 2e       	mov	r9, r18
 4a0:	11 c0       	rjmp	.+34     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 4a2:	ea e0       	ldi	r30, 0x0A	; 10
 4a4:	2e 9e       	mul	r2, r30
 4a6:	20 0d       	add	r18, r0
 4a8:	11 24       	eor	r1, r1
 4aa:	22 2e       	mov	r2, r18
 4ac:	f3 2d       	mov	r31, r3
 4ae:	f0 62       	ori	r31, 0x20	; 32
 4b0:	3f 2e       	mov	r3, r31
 4b2:	08 c0       	rjmp	.+16     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 4b4:	8c 36       	cpi	r24, 0x6C	; 108
 4b6:	21 f4       	brne	.+8      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 4b8:	83 2d       	mov	r24, r3
 4ba:	80 68       	ori	r24, 0x80	; 128
 4bc:	38 2e       	mov	r3, r24
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 4c0:	88 36       	cpi	r24, 0x68	; 104
 4c2:	41 f4       	brne	.+16     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4c4:	f7 01       	movw	r30, r14
 4c6:	93 fd       	sbrc	r25, 3
 4c8:	85 91       	lpm	r24, Z+
 4ca:	93 ff       	sbrs	r25, 3
 4cc:	81 91       	ld	r24, Z+
 4ce:	7f 01       	movw	r14, r30
 4d0:	81 11       	cpse	r24, r1
 4d2:	b3 cf       	rjmp	.-154    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 4d4:	98 2f       	mov	r25, r24
 4d6:	9f 7d       	andi	r25, 0xDF	; 223
 4d8:	95 54       	subi	r25, 0x45	; 69
 4da:	93 30       	cpi	r25, 0x03	; 3
 4dc:	28 f4       	brcc	.+10     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4de:	0c 5f       	subi	r16, 0xFC	; 252
 4e0:	1f 4f       	sbci	r17, 0xFF	; 255
 4e2:	9f e3       	ldi	r25, 0x3F	; 63
 4e4:	99 83       	std	Y+1, r25	; 0x01
 4e6:	0d c0       	rjmp	.+26     	; 0x502 <__stack+0x3>
 4e8:	83 36       	cpi	r24, 0x63	; 99
 4ea:	31 f0       	breq	.+12     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 4ec:	83 37       	cpi	r24, 0x73	; 115
 4ee:	71 f0       	breq	.+28     	; 0x50c <__stack+0xd>
 4f0:	83 35       	cpi	r24, 0x53	; 83
 4f2:	09 f0       	breq	.+2      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
 4f4:	59 c0       	rjmp	.+178    	; 0x5a8 <__stack+0xa9>
 4f6:	21 c0       	rjmp	.+66     	; 0x53a <__stack+0x3b>
 4f8:	f8 01       	movw	r30, r16
 4fa:	80 81       	ld	r24, Z
 4fc:	89 83       	std	Y+1, r24	; 0x01
 4fe:	0e 5f       	subi	r16, 0xFE	; 254
 500:	1f 4f       	sbci	r17, 0xFF	; 255
 502:	88 24       	eor	r8, r8
 504:	83 94       	inc	r8
 506:	91 2c       	mov	r9, r1
 508:	53 01       	movw	r10, r6
 50a:	13 c0       	rjmp	.+38     	; 0x532 <__stack+0x33>
 50c:	28 01       	movw	r4, r16
 50e:	f2 e0       	ldi	r31, 0x02	; 2
 510:	4f 0e       	add	r4, r31
 512:	51 1c       	adc	r5, r1
 514:	f8 01       	movw	r30, r16
 516:	a0 80       	ld	r10, Z
 518:	b1 80       	ldd	r11, Z+1	; 0x01
 51a:	36 fe       	sbrs	r3, 6
 51c:	03 c0       	rjmp	.+6      	; 0x524 <__stack+0x25>
 51e:	69 2d       	mov	r22, r9
 520:	70 e0       	ldi	r23, 0x00	; 0
 522:	02 c0       	rjmp	.+4      	; 0x528 <__stack+0x29>
 524:	6f ef       	ldi	r22, 0xFF	; 255
 526:	7f ef       	ldi	r23, 0xFF	; 255
 528:	c5 01       	movw	r24, r10
 52a:	0e 94 1f 05 	call	0xa3e	; 0xa3e <strnlen>
 52e:	4c 01       	movw	r8, r24
 530:	82 01       	movw	r16, r4
 532:	f3 2d       	mov	r31, r3
 534:	ff 77       	andi	r31, 0x7F	; 127
 536:	3f 2e       	mov	r3, r31
 538:	16 c0       	rjmp	.+44     	; 0x566 <__stack+0x67>
 53a:	28 01       	movw	r4, r16
 53c:	22 e0       	ldi	r18, 0x02	; 2
 53e:	42 0e       	add	r4, r18
 540:	51 1c       	adc	r5, r1
 542:	f8 01       	movw	r30, r16
 544:	a0 80       	ld	r10, Z
 546:	b1 80       	ldd	r11, Z+1	; 0x01
 548:	36 fe       	sbrs	r3, 6
 54a:	03 c0       	rjmp	.+6      	; 0x552 <__stack+0x53>
 54c:	69 2d       	mov	r22, r9
 54e:	70 e0       	ldi	r23, 0x00	; 0
 550:	02 c0       	rjmp	.+4      	; 0x556 <__stack+0x57>
 552:	6f ef       	ldi	r22, 0xFF	; 255
 554:	7f ef       	ldi	r23, 0xFF	; 255
 556:	c5 01       	movw	r24, r10
 558:	0e 94 0d 05 	call	0xa1a	; 0xa1a <strnlen_P>
 55c:	4c 01       	movw	r8, r24
 55e:	f3 2d       	mov	r31, r3
 560:	f0 68       	ori	r31, 0x80	; 128
 562:	3f 2e       	mov	r3, r31
 564:	82 01       	movw	r16, r4
 566:	33 fc       	sbrc	r3, 3
 568:	1b c0       	rjmp	.+54     	; 0x5a0 <__stack+0xa1>
 56a:	82 2d       	mov	r24, r2
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	88 16       	cp	r8, r24
 570:	99 06       	cpc	r9, r25
 572:	b0 f4       	brcc	.+44     	; 0x5a0 <__stack+0xa1>
 574:	b6 01       	movw	r22, r12
 576:	80 e2       	ldi	r24, 0x20	; 32
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	0e 94 2a 05 	call	0xa54	; 0xa54 <fputc>
 57e:	2a 94       	dec	r2
 580:	f4 cf       	rjmp	.-24     	; 0x56a <__stack+0x6b>
 582:	f5 01       	movw	r30, r10
 584:	37 fc       	sbrc	r3, 7
 586:	85 91       	lpm	r24, Z+
 588:	37 fe       	sbrs	r3, 7
 58a:	81 91       	ld	r24, Z+
 58c:	5f 01       	movw	r10, r30
 58e:	b6 01       	movw	r22, r12
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	0e 94 2a 05 	call	0xa54	; 0xa54 <fputc>
 596:	21 10       	cpse	r2, r1
 598:	2a 94       	dec	r2
 59a:	21 e0       	ldi	r18, 0x01	; 1
 59c:	82 1a       	sub	r8, r18
 59e:	91 08       	sbc	r9, r1
 5a0:	81 14       	cp	r8, r1
 5a2:	91 04       	cpc	r9, r1
 5a4:	71 f7       	brne	.-36     	; 0x582 <__stack+0x83>
 5a6:	e8 c0       	rjmp	.+464    	; 0x778 <__stack+0x279>
 5a8:	84 36       	cpi	r24, 0x64	; 100
 5aa:	11 f0       	breq	.+4      	; 0x5b0 <__stack+0xb1>
 5ac:	89 36       	cpi	r24, 0x69	; 105
 5ae:	41 f5       	brne	.+80     	; 0x600 <__stack+0x101>
 5b0:	f8 01       	movw	r30, r16
 5b2:	37 fe       	sbrs	r3, 7
 5b4:	07 c0       	rjmp	.+14     	; 0x5c4 <__stack+0xc5>
 5b6:	60 81       	ld	r22, Z
 5b8:	71 81       	ldd	r23, Z+1	; 0x01
 5ba:	82 81       	ldd	r24, Z+2	; 0x02
 5bc:	93 81       	ldd	r25, Z+3	; 0x03
 5be:	0c 5f       	subi	r16, 0xFC	; 252
 5c0:	1f 4f       	sbci	r17, 0xFF	; 255
 5c2:	08 c0       	rjmp	.+16     	; 0x5d4 <__stack+0xd5>
 5c4:	60 81       	ld	r22, Z
 5c6:	71 81       	ldd	r23, Z+1	; 0x01
 5c8:	07 2e       	mov	r0, r23
 5ca:	00 0c       	add	r0, r0
 5cc:	88 0b       	sbc	r24, r24
 5ce:	99 0b       	sbc	r25, r25
 5d0:	0e 5f       	subi	r16, 0xFE	; 254
 5d2:	1f 4f       	sbci	r17, 0xFF	; 255
 5d4:	f3 2d       	mov	r31, r3
 5d6:	ff 76       	andi	r31, 0x6F	; 111
 5d8:	3f 2e       	mov	r3, r31
 5da:	97 ff       	sbrs	r25, 7
 5dc:	09 c0       	rjmp	.+18     	; 0x5f0 <__stack+0xf1>
 5de:	90 95       	com	r25
 5e0:	80 95       	com	r24
 5e2:	70 95       	com	r23
 5e4:	61 95       	neg	r22
 5e6:	7f 4f       	sbci	r23, 0xFF	; 255
 5e8:	8f 4f       	sbci	r24, 0xFF	; 255
 5ea:	9f 4f       	sbci	r25, 0xFF	; 255
 5ec:	f0 68       	ori	r31, 0x80	; 128
 5ee:	3f 2e       	mov	r3, r31
 5f0:	2a e0       	ldi	r18, 0x0A	; 10
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	a3 01       	movw	r20, r6
 5f6:	0e 94 66 05 	call	0xacc	; 0xacc <__ultoa_invert>
 5fa:	88 2e       	mov	r8, r24
 5fc:	86 18       	sub	r8, r6
 5fe:	45 c0       	rjmp	.+138    	; 0x68a <__stack+0x18b>
 600:	85 37       	cpi	r24, 0x75	; 117
 602:	31 f4       	brne	.+12     	; 0x610 <__stack+0x111>
 604:	23 2d       	mov	r18, r3
 606:	2f 7e       	andi	r18, 0xEF	; 239
 608:	b2 2e       	mov	r11, r18
 60a:	2a e0       	ldi	r18, 0x0A	; 10
 60c:	30 e0       	ldi	r19, 0x00	; 0
 60e:	25 c0       	rjmp	.+74     	; 0x65a <__stack+0x15b>
 610:	93 2d       	mov	r25, r3
 612:	99 7f       	andi	r25, 0xF9	; 249
 614:	b9 2e       	mov	r11, r25
 616:	8f 36       	cpi	r24, 0x6F	; 111
 618:	c1 f0       	breq	.+48     	; 0x64a <__stack+0x14b>
 61a:	18 f4       	brcc	.+6      	; 0x622 <__stack+0x123>
 61c:	88 35       	cpi	r24, 0x58	; 88
 61e:	79 f0       	breq	.+30     	; 0x63e <__stack+0x13f>
 620:	b5 c0       	rjmp	.+362    	; 0x78c <__stack+0x28d>
 622:	80 37       	cpi	r24, 0x70	; 112
 624:	19 f0       	breq	.+6      	; 0x62c <__stack+0x12d>
 626:	88 37       	cpi	r24, 0x78	; 120
 628:	21 f0       	breq	.+8      	; 0x632 <__stack+0x133>
 62a:	b0 c0       	rjmp	.+352    	; 0x78c <__stack+0x28d>
 62c:	e9 2f       	mov	r30, r25
 62e:	e0 61       	ori	r30, 0x10	; 16
 630:	be 2e       	mov	r11, r30
 632:	b4 fe       	sbrs	r11, 4
 634:	0d c0       	rjmp	.+26     	; 0x650 <__stack+0x151>
 636:	fb 2d       	mov	r31, r11
 638:	f4 60       	ori	r31, 0x04	; 4
 63a:	bf 2e       	mov	r11, r31
 63c:	09 c0       	rjmp	.+18     	; 0x650 <__stack+0x151>
 63e:	34 fe       	sbrs	r3, 4
 640:	0a c0       	rjmp	.+20     	; 0x656 <__stack+0x157>
 642:	29 2f       	mov	r18, r25
 644:	26 60       	ori	r18, 0x06	; 6
 646:	b2 2e       	mov	r11, r18
 648:	06 c0       	rjmp	.+12     	; 0x656 <__stack+0x157>
 64a:	28 e0       	ldi	r18, 0x08	; 8
 64c:	30 e0       	ldi	r19, 0x00	; 0
 64e:	05 c0       	rjmp	.+10     	; 0x65a <__stack+0x15b>
 650:	20 e1       	ldi	r18, 0x10	; 16
 652:	30 e0       	ldi	r19, 0x00	; 0
 654:	02 c0       	rjmp	.+4      	; 0x65a <__stack+0x15b>
 656:	20 e1       	ldi	r18, 0x10	; 16
 658:	32 e0       	ldi	r19, 0x02	; 2
 65a:	f8 01       	movw	r30, r16
 65c:	b7 fe       	sbrs	r11, 7
 65e:	07 c0       	rjmp	.+14     	; 0x66e <__stack+0x16f>
 660:	60 81       	ld	r22, Z
 662:	71 81       	ldd	r23, Z+1	; 0x01
 664:	82 81       	ldd	r24, Z+2	; 0x02
 666:	93 81       	ldd	r25, Z+3	; 0x03
 668:	0c 5f       	subi	r16, 0xFC	; 252
 66a:	1f 4f       	sbci	r17, 0xFF	; 255
 66c:	06 c0       	rjmp	.+12     	; 0x67a <__stack+0x17b>
 66e:	60 81       	ld	r22, Z
 670:	71 81       	ldd	r23, Z+1	; 0x01
 672:	80 e0       	ldi	r24, 0x00	; 0
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	0e 5f       	subi	r16, 0xFE	; 254
 678:	1f 4f       	sbci	r17, 0xFF	; 255
 67a:	a3 01       	movw	r20, r6
 67c:	0e 94 66 05 	call	0xacc	; 0xacc <__ultoa_invert>
 680:	88 2e       	mov	r8, r24
 682:	86 18       	sub	r8, r6
 684:	fb 2d       	mov	r31, r11
 686:	ff 77       	andi	r31, 0x7F	; 127
 688:	3f 2e       	mov	r3, r31
 68a:	36 fe       	sbrs	r3, 6
 68c:	0d c0       	rjmp	.+26     	; 0x6a8 <__stack+0x1a9>
 68e:	23 2d       	mov	r18, r3
 690:	2e 7f       	andi	r18, 0xFE	; 254
 692:	a2 2e       	mov	r10, r18
 694:	89 14       	cp	r8, r9
 696:	58 f4       	brcc	.+22     	; 0x6ae <__stack+0x1af>
 698:	34 fe       	sbrs	r3, 4
 69a:	0b c0       	rjmp	.+22     	; 0x6b2 <__stack+0x1b3>
 69c:	32 fc       	sbrc	r3, 2
 69e:	09 c0       	rjmp	.+18     	; 0x6b2 <__stack+0x1b3>
 6a0:	83 2d       	mov	r24, r3
 6a2:	8e 7e       	andi	r24, 0xEE	; 238
 6a4:	a8 2e       	mov	r10, r24
 6a6:	05 c0       	rjmp	.+10     	; 0x6b2 <__stack+0x1b3>
 6a8:	b8 2c       	mov	r11, r8
 6aa:	a3 2c       	mov	r10, r3
 6ac:	03 c0       	rjmp	.+6      	; 0x6b4 <__stack+0x1b5>
 6ae:	b8 2c       	mov	r11, r8
 6b0:	01 c0       	rjmp	.+2      	; 0x6b4 <__stack+0x1b5>
 6b2:	b9 2c       	mov	r11, r9
 6b4:	a4 fe       	sbrs	r10, 4
 6b6:	0f c0       	rjmp	.+30     	; 0x6d6 <__stack+0x1d7>
 6b8:	fe 01       	movw	r30, r28
 6ba:	e8 0d       	add	r30, r8
 6bc:	f1 1d       	adc	r31, r1
 6be:	80 81       	ld	r24, Z
 6c0:	80 33       	cpi	r24, 0x30	; 48
 6c2:	21 f4       	brne	.+8      	; 0x6cc <__stack+0x1cd>
 6c4:	9a 2d       	mov	r25, r10
 6c6:	99 7e       	andi	r25, 0xE9	; 233
 6c8:	a9 2e       	mov	r10, r25
 6ca:	09 c0       	rjmp	.+18     	; 0x6de <__stack+0x1df>
 6cc:	a2 fe       	sbrs	r10, 2
 6ce:	06 c0       	rjmp	.+12     	; 0x6dc <__stack+0x1dd>
 6d0:	b3 94       	inc	r11
 6d2:	b3 94       	inc	r11
 6d4:	04 c0       	rjmp	.+8      	; 0x6de <__stack+0x1df>
 6d6:	8a 2d       	mov	r24, r10
 6d8:	86 78       	andi	r24, 0x86	; 134
 6da:	09 f0       	breq	.+2      	; 0x6de <__stack+0x1df>
 6dc:	b3 94       	inc	r11
 6de:	a3 fc       	sbrc	r10, 3
 6e0:	11 c0       	rjmp	.+34     	; 0x704 <__stack+0x205>
 6e2:	a0 fe       	sbrs	r10, 0
 6e4:	06 c0       	rjmp	.+12     	; 0x6f2 <__stack+0x1f3>
 6e6:	b2 14       	cp	r11, r2
 6e8:	88 f4       	brcc	.+34     	; 0x70c <__stack+0x20d>
 6ea:	28 0c       	add	r2, r8
 6ec:	92 2c       	mov	r9, r2
 6ee:	9b 18       	sub	r9, r11
 6f0:	0e c0       	rjmp	.+28     	; 0x70e <__stack+0x20f>
 6f2:	b2 14       	cp	r11, r2
 6f4:	60 f4       	brcc	.+24     	; 0x70e <__stack+0x20f>
 6f6:	b6 01       	movw	r22, r12
 6f8:	80 e2       	ldi	r24, 0x20	; 32
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	0e 94 2a 05 	call	0xa54	; 0xa54 <fputc>
 700:	b3 94       	inc	r11
 702:	f7 cf       	rjmp	.-18     	; 0x6f2 <__stack+0x1f3>
 704:	b2 14       	cp	r11, r2
 706:	18 f4       	brcc	.+6      	; 0x70e <__stack+0x20f>
 708:	2b 18       	sub	r2, r11
 70a:	02 c0       	rjmp	.+4      	; 0x710 <__stack+0x211>
 70c:	98 2c       	mov	r9, r8
 70e:	21 2c       	mov	r2, r1
 710:	a4 fe       	sbrs	r10, 4
 712:	10 c0       	rjmp	.+32     	; 0x734 <__stack+0x235>
 714:	b6 01       	movw	r22, r12
 716:	80 e3       	ldi	r24, 0x30	; 48
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	0e 94 2a 05 	call	0xa54	; 0xa54 <fputc>
 71e:	a2 fe       	sbrs	r10, 2
 720:	17 c0       	rjmp	.+46     	; 0x750 <__stack+0x251>
 722:	a1 fc       	sbrc	r10, 1
 724:	03 c0       	rjmp	.+6      	; 0x72c <__stack+0x22d>
 726:	88 e7       	ldi	r24, 0x78	; 120
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	02 c0       	rjmp	.+4      	; 0x730 <__stack+0x231>
 72c:	88 e5       	ldi	r24, 0x58	; 88
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	b6 01       	movw	r22, r12
 732:	0c c0       	rjmp	.+24     	; 0x74c <__stack+0x24d>
 734:	8a 2d       	mov	r24, r10
 736:	86 78       	andi	r24, 0x86	; 134
 738:	59 f0       	breq	.+22     	; 0x750 <__stack+0x251>
 73a:	a1 fe       	sbrs	r10, 1
 73c:	02 c0       	rjmp	.+4      	; 0x742 <__stack+0x243>
 73e:	8b e2       	ldi	r24, 0x2B	; 43
 740:	01 c0       	rjmp	.+2      	; 0x744 <__stack+0x245>
 742:	80 e2       	ldi	r24, 0x20	; 32
 744:	a7 fc       	sbrc	r10, 7
 746:	8d e2       	ldi	r24, 0x2D	; 45
 748:	b6 01       	movw	r22, r12
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	0e 94 2a 05 	call	0xa54	; 0xa54 <fputc>
 750:	89 14       	cp	r8, r9
 752:	38 f4       	brcc	.+14     	; 0x762 <__stack+0x263>
 754:	b6 01       	movw	r22, r12
 756:	80 e3       	ldi	r24, 0x30	; 48
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	0e 94 2a 05 	call	0xa54	; 0xa54 <fputc>
 75e:	9a 94       	dec	r9
 760:	f7 cf       	rjmp	.-18     	; 0x750 <__stack+0x251>
 762:	8a 94       	dec	r8
 764:	f3 01       	movw	r30, r6
 766:	e8 0d       	add	r30, r8
 768:	f1 1d       	adc	r31, r1
 76a:	80 81       	ld	r24, Z
 76c:	b6 01       	movw	r22, r12
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	0e 94 2a 05 	call	0xa54	; 0xa54 <fputc>
 774:	81 10       	cpse	r8, r1
 776:	f5 cf       	rjmp	.-22     	; 0x762 <__stack+0x263>
 778:	22 20       	and	r2, r2
 77a:	09 f4       	brne	.+2      	; 0x77e <__stack+0x27f>
 77c:	42 ce       	rjmp	.-892    	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 77e:	b6 01       	movw	r22, r12
 780:	80 e2       	ldi	r24, 0x20	; 32
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	0e 94 2a 05 	call	0xa54	; 0xa54 <fputc>
 788:	2a 94       	dec	r2
 78a:	f6 cf       	rjmp	.-20     	; 0x778 <__stack+0x279>
 78c:	f6 01       	movw	r30, r12
 78e:	86 81       	ldd	r24, Z+6	; 0x06
 790:	97 81       	ldd	r25, Z+7	; 0x07
 792:	02 c0       	rjmp	.+4      	; 0x798 <__stack+0x299>
 794:	8f ef       	ldi	r24, 0xFF	; 255
 796:	9f ef       	ldi	r25, 0xFF	; 255
 798:	2b 96       	adiw	r28, 0x0b	; 11
 79a:	e2 e1       	ldi	r30, 0x12	; 18
 79c:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__epilogue_restores__>

000007a0 <calloc>:
 7a0:	0f 93       	push	r16
 7a2:	1f 93       	push	r17
 7a4:	cf 93       	push	r28
 7a6:	df 93       	push	r29
 7a8:	86 9f       	mul	r24, r22
 7aa:	80 01       	movw	r16, r0
 7ac:	87 9f       	mul	r24, r23
 7ae:	10 0d       	add	r17, r0
 7b0:	96 9f       	mul	r25, r22
 7b2:	10 0d       	add	r17, r0
 7b4:	11 24       	eor	r1, r1
 7b6:	c8 01       	movw	r24, r16
 7b8:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <malloc>
 7bc:	ec 01       	movw	r28, r24
 7be:	00 97       	sbiw	r24, 0x00	; 0
 7c0:	29 f0       	breq	.+10     	; 0x7cc <calloc+0x2c>
 7c2:	a8 01       	movw	r20, r16
 7c4:	60 e0       	ldi	r22, 0x00	; 0
 7c6:	70 e0       	ldi	r23, 0x00	; 0
 7c8:	0e 94 18 05 	call	0xa30	; 0xa30 <memset>
 7cc:	ce 01       	movw	r24, r28
 7ce:	df 91       	pop	r29
 7d0:	cf 91       	pop	r28
 7d2:	1f 91       	pop	r17
 7d4:	0f 91       	pop	r16
 7d6:	08 95       	ret

000007d8 <malloc>:
 7d8:	0f 93       	push	r16
 7da:	1f 93       	push	r17
 7dc:	cf 93       	push	r28
 7de:	df 93       	push	r29
 7e0:	82 30       	cpi	r24, 0x02	; 2
 7e2:	91 05       	cpc	r25, r1
 7e4:	10 f4       	brcc	.+4      	; 0x7ea <malloc+0x12>
 7e6:	82 e0       	ldi	r24, 0x02	; 2
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <__flp>
 7ee:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <__flp+0x1>
 7f2:	20 e0       	ldi	r18, 0x00	; 0
 7f4:	30 e0       	ldi	r19, 0x00	; 0
 7f6:	a0 e0       	ldi	r26, 0x00	; 0
 7f8:	b0 e0       	ldi	r27, 0x00	; 0
 7fa:	30 97       	sbiw	r30, 0x00	; 0
 7fc:	19 f1       	breq	.+70     	; 0x844 <malloc+0x6c>
 7fe:	40 81       	ld	r20, Z
 800:	51 81       	ldd	r21, Z+1	; 0x01
 802:	02 81       	ldd	r16, Z+2	; 0x02
 804:	13 81       	ldd	r17, Z+3	; 0x03
 806:	48 17       	cp	r20, r24
 808:	59 07       	cpc	r21, r25
 80a:	c8 f0       	brcs	.+50     	; 0x83e <malloc+0x66>
 80c:	84 17       	cp	r24, r20
 80e:	95 07       	cpc	r25, r21
 810:	69 f4       	brne	.+26     	; 0x82c <malloc+0x54>
 812:	10 97       	sbiw	r26, 0x00	; 0
 814:	31 f0       	breq	.+12     	; 0x822 <malloc+0x4a>
 816:	12 96       	adiw	r26, 0x02	; 2
 818:	0c 93       	st	X, r16
 81a:	12 97       	sbiw	r26, 0x02	; 2
 81c:	13 96       	adiw	r26, 0x03	; 3
 81e:	1c 93       	st	X, r17
 820:	27 c0       	rjmp	.+78     	; 0x870 <malloc+0x98>
 822:	00 93 f8 01 	sts	0x01F8, r16	; 0x8001f8 <__flp>
 826:	10 93 f9 01 	sts	0x01F9, r17	; 0x8001f9 <__flp+0x1>
 82a:	22 c0       	rjmp	.+68     	; 0x870 <malloc+0x98>
 82c:	21 15       	cp	r18, r1
 82e:	31 05       	cpc	r19, r1
 830:	19 f0       	breq	.+6      	; 0x838 <malloc+0x60>
 832:	42 17       	cp	r20, r18
 834:	53 07       	cpc	r21, r19
 836:	18 f4       	brcc	.+6      	; 0x83e <malloc+0x66>
 838:	9a 01       	movw	r18, r20
 83a:	bd 01       	movw	r22, r26
 83c:	ef 01       	movw	r28, r30
 83e:	df 01       	movw	r26, r30
 840:	f8 01       	movw	r30, r16
 842:	db cf       	rjmp	.-74     	; 0x7fa <malloc+0x22>
 844:	21 15       	cp	r18, r1
 846:	31 05       	cpc	r19, r1
 848:	f9 f0       	breq	.+62     	; 0x888 <malloc+0xb0>
 84a:	28 1b       	sub	r18, r24
 84c:	39 0b       	sbc	r19, r25
 84e:	24 30       	cpi	r18, 0x04	; 4
 850:	31 05       	cpc	r19, r1
 852:	80 f4       	brcc	.+32     	; 0x874 <malloc+0x9c>
 854:	8a 81       	ldd	r24, Y+2	; 0x02
 856:	9b 81       	ldd	r25, Y+3	; 0x03
 858:	61 15       	cp	r22, r1
 85a:	71 05       	cpc	r23, r1
 85c:	21 f0       	breq	.+8      	; 0x866 <malloc+0x8e>
 85e:	fb 01       	movw	r30, r22
 860:	93 83       	std	Z+3, r25	; 0x03
 862:	82 83       	std	Z+2, r24	; 0x02
 864:	04 c0       	rjmp	.+8      	; 0x86e <malloc+0x96>
 866:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <__flp+0x1>
 86a:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <__flp>
 86e:	fe 01       	movw	r30, r28
 870:	32 96       	adiw	r30, 0x02	; 2
 872:	44 c0       	rjmp	.+136    	; 0x8fc <malloc+0x124>
 874:	fe 01       	movw	r30, r28
 876:	e2 0f       	add	r30, r18
 878:	f3 1f       	adc	r31, r19
 87a:	81 93       	st	Z+, r24
 87c:	91 93       	st	Z+, r25
 87e:	22 50       	subi	r18, 0x02	; 2
 880:	31 09       	sbc	r19, r1
 882:	39 83       	std	Y+1, r19	; 0x01
 884:	28 83       	st	Y, r18
 886:	3a c0       	rjmp	.+116    	; 0x8fc <malloc+0x124>
 888:	20 91 f6 01 	lds	r18, 0x01F6	; 0x8001f6 <__brkval>
 88c:	30 91 f7 01 	lds	r19, 0x01F7	; 0x8001f7 <__brkval+0x1>
 890:	23 2b       	or	r18, r19
 892:	41 f4       	brne	.+16     	; 0x8a4 <malloc+0xcc>
 894:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__malloc_heap_start>
 898:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__malloc_heap_start+0x1>
 89c:	30 93 f7 01 	sts	0x01F7, r19	; 0x8001f7 <__brkval+0x1>
 8a0:	20 93 f6 01 	sts	0x01F6, r18	; 0x8001f6 <__brkval>
 8a4:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_heap_end>
 8a8:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_heap_end+0x1>
 8ac:	21 15       	cp	r18, r1
 8ae:	31 05       	cpc	r19, r1
 8b0:	41 f4       	brne	.+16     	; 0x8c2 <malloc+0xea>
 8b2:	2d b7       	in	r18, 0x3d	; 61
 8b4:	3e b7       	in	r19, 0x3e	; 62
 8b6:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__malloc_margin>
 8ba:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <__malloc_margin+0x1>
 8be:	24 1b       	sub	r18, r20
 8c0:	35 0b       	sbc	r19, r21
 8c2:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <__brkval>
 8c6:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <__brkval+0x1>
 8ca:	e2 17       	cp	r30, r18
 8cc:	f3 07       	cpc	r31, r19
 8ce:	a0 f4       	brcc	.+40     	; 0x8f8 <malloc+0x120>
 8d0:	2e 1b       	sub	r18, r30
 8d2:	3f 0b       	sbc	r19, r31
 8d4:	28 17       	cp	r18, r24
 8d6:	39 07       	cpc	r19, r25
 8d8:	78 f0       	brcs	.+30     	; 0x8f8 <malloc+0x120>
 8da:	ac 01       	movw	r20, r24
 8dc:	4e 5f       	subi	r20, 0xFE	; 254
 8de:	5f 4f       	sbci	r21, 0xFF	; 255
 8e0:	24 17       	cp	r18, r20
 8e2:	35 07       	cpc	r19, r21
 8e4:	48 f0       	brcs	.+18     	; 0x8f8 <malloc+0x120>
 8e6:	4e 0f       	add	r20, r30
 8e8:	5f 1f       	adc	r21, r31
 8ea:	50 93 f7 01 	sts	0x01F7, r21	; 0x8001f7 <__brkval+0x1>
 8ee:	40 93 f6 01 	sts	0x01F6, r20	; 0x8001f6 <__brkval>
 8f2:	81 93       	st	Z+, r24
 8f4:	91 93       	st	Z+, r25
 8f6:	02 c0       	rjmp	.+4      	; 0x8fc <malloc+0x124>
 8f8:	e0 e0       	ldi	r30, 0x00	; 0
 8fa:	f0 e0       	ldi	r31, 0x00	; 0
 8fc:	cf 01       	movw	r24, r30
 8fe:	df 91       	pop	r29
 900:	cf 91       	pop	r28
 902:	1f 91       	pop	r17
 904:	0f 91       	pop	r16
 906:	08 95       	ret

00000908 <free>:
 908:	cf 93       	push	r28
 90a:	df 93       	push	r29
 90c:	00 97       	sbiw	r24, 0x00	; 0
 90e:	09 f4       	brne	.+2      	; 0x912 <free+0xa>
 910:	81 c0       	rjmp	.+258    	; 0xa14 <free+0x10c>
 912:	fc 01       	movw	r30, r24
 914:	32 97       	sbiw	r30, 0x02	; 2
 916:	13 82       	std	Z+3, r1	; 0x03
 918:	12 82       	std	Z+2, r1	; 0x02
 91a:	a0 91 f8 01 	lds	r26, 0x01F8	; 0x8001f8 <__flp>
 91e:	b0 91 f9 01 	lds	r27, 0x01F9	; 0x8001f9 <__flp+0x1>
 922:	10 97       	sbiw	r26, 0x00	; 0
 924:	81 f4       	brne	.+32     	; 0x946 <free+0x3e>
 926:	20 81       	ld	r18, Z
 928:	31 81       	ldd	r19, Z+1	; 0x01
 92a:	82 0f       	add	r24, r18
 92c:	93 1f       	adc	r25, r19
 92e:	20 91 f6 01 	lds	r18, 0x01F6	; 0x8001f6 <__brkval>
 932:	30 91 f7 01 	lds	r19, 0x01F7	; 0x8001f7 <__brkval+0x1>
 936:	28 17       	cp	r18, r24
 938:	39 07       	cpc	r19, r25
 93a:	51 f5       	brne	.+84     	; 0x990 <free+0x88>
 93c:	f0 93 f7 01 	sts	0x01F7, r31	; 0x8001f7 <__brkval+0x1>
 940:	e0 93 f6 01 	sts	0x01F6, r30	; 0x8001f6 <__brkval>
 944:	67 c0       	rjmp	.+206    	; 0xa14 <free+0x10c>
 946:	ed 01       	movw	r28, r26
 948:	20 e0       	ldi	r18, 0x00	; 0
 94a:	30 e0       	ldi	r19, 0x00	; 0
 94c:	ce 17       	cp	r28, r30
 94e:	df 07       	cpc	r29, r31
 950:	40 f4       	brcc	.+16     	; 0x962 <free+0x5a>
 952:	4a 81       	ldd	r20, Y+2	; 0x02
 954:	5b 81       	ldd	r21, Y+3	; 0x03
 956:	9e 01       	movw	r18, r28
 958:	41 15       	cp	r20, r1
 95a:	51 05       	cpc	r21, r1
 95c:	f1 f0       	breq	.+60     	; 0x99a <free+0x92>
 95e:	ea 01       	movw	r28, r20
 960:	f5 cf       	rjmp	.-22     	; 0x94c <free+0x44>
 962:	d3 83       	std	Z+3, r29	; 0x03
 964:	c2 83       	std	Z+2, r28	; 0x02
 966:	40 81       	ld	r20, Z
 968:	51 81       	ldd	r21, Z+1	; 0x01
 96a:	84 0f       	add	r24, r20
 96c:	95 1f       	adc	r25, r21
 96e:	c8 17       	cp	r28, r24
 970:	d9 07       	cpc	r29, r25
 972:	59 f4       	brne	.+22     	; 0x98a <free+0x82>
 974:	88 81       	ld	r24, Y
 976:	99 81       	ldd	r25, Y+1	; 0x01
 978:	84 0f       	add	r24, r20
 97a:	95 1f       	adc	r25, r21
 97c:	02 96       	adiw	r24, 0x02	; 2
 97e:	91 83       	std	Z+1, r25	; 0x01
 980:	80 83       	st	Z, r24
 982:	8a 81       	ldd	r24, Y+2	; 0x02
 984:	9b 81       	ldd	r25, Y+3	; 0x03
 986:	93 83       	std	Z+3, r25	; 0x03
 988:	82 83       	std	Z+2, r24	; 0x02
 98a:	21 15       	cp	r18, r1
 98c:	31 05       	cpc	r19, r1
 98e:	29 f4       	brne	.+10     	; 0x99a <free+0x92>
 990:	f0 93 f9 01 	sts	0x01F9, r31	; 0x8001f9 <__flp+0x1>
 994:	e0 93 f8 01 	sts	0x01F8, r30	; 0x8001f8 <__flp>
 998:	3d c0       	rjmp	.+122    	; 0xa14 <free+0x10c>
 99a:	e9 01       	movw	r28, r18
 99c:	fb 83       	std	Y+3, r31	; 0x03
 99e:	ea 83       	std	Y+2, r30	; 0x02
 9a0:	49 91       	ld	r20, Y+
 9a2:	59 91       	ld	r21, Y+
 9a4:	c4 0f       	add	r28, r20
 9a6:	d5 1f       	adc	r29, r21
 9a8:	ec 17       	cp	r30, r28
 9aa:	fd 07       	cpc	r31, r29
 9ac:	61 f4       	brne	.+24     	; 0x9c6 <free+0xbe>
 9ae:	80 81       	ld	r24, Z
 9b0:	91 81       	ldd	r25, Z+1	; 0x01
 9b2:	84 0f       	add	r24, r20
 9b4:	95 1f       	adc	r25, r21
 9b6:	02 96       	adiw	r24, 0x02	; 2
 9b8:	e9 01       	movw	r28, r18
 9ba:	99 83       	std	Y+1, r25	; 0x01
 9bc:	88 83       	st	Y, r24
 9be:	82 81       	ldd	r24, Z+2	; 0x02
 9c0:	93 81       	ldd	r25, Z+3	; 0x03
 9c2:	9b 83       	std	Y+3, r25	; 0x03
 9c4:	8a 83       	std	Y+2, r24	; 0x02
 9c6:	e0 e0       	ldi	r30, 0x00	; 0
 9c8:	f0 e0       	ldi	r31, 0x00	; 0
 9ca:	12 96       	adiw	r26, 0x02	; 2
 9cc:	8d 91       	ld	r24, X+
 9ce:	9c 91       	ld	r25, X
 9d0:	13 97       	sbiw	r26, 0x03	; 3
 9d2:	00 97       	sbiw	r24, 0x00	; 0
 9d4:	19 f0       	breq	.+6      	; 0x9dc <free+0xd4>
 9d6:	fd 01       	movw	r30, r26
 9d8:	dc 01       	movw	r26, r24
 9da:	f7 cf       	rjmp	.-18     	; 0x9ca <free+0xc2>
 9dc:	8d 91       	ld	r24, X+
 9de:	9c 91       	ld	r25, X
 9e0:	11 97       	sbiw	r26, 0x01	; 1
 9e2:	9d 01       	movw	r18, r26
 9e4:	2e 5f       	subi	r18, 0xFE	; 254
 9e6:	3f 4f       	sbci	r19, 0xFF	; 255
 9e8:	82 0f       	add	r24, r18
 9ea:	93 1f       	adc	r25, r19
 9ec:	20 91 f6 01 	lds	r18, 0x01F6	; 0x8001f6 <__brkval>
 9f0:	30 91 f7 01 	lds	r19, 0x01F7	; 0x8001f7 <__brkval+0x1>
 9f4:	28 17       	cp	r18, r24
 9f6:	39 07       	cpc	r19, r25
 9f8:	69 f4       	brne	.+26     	; 0xa14 <free+0x10c>
 9fa:	30 97       	sbiw	r30, 0x00	; 0
 9fc:	29 f4       	brne	.+10     	; 0xa08 <free+0x100>
 9fe:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <__flp+0x1>
 a02:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <__flp>
 a06:	02 c0       	rjmp	.+4      	; 0xa0c <free+0x104>
 a08:	13 82       	std	Z+3, r1	; 0x03
 a0a:	12 82       	std	Z+2, r1	; 0x02
 a0c:	b0 93 f7 01 	sts	0x01F7, r27	; 0x8001f7 <__brkval+0x1>
 a10:	a0 93 f6 01 	sts	0x01F6, r26	; 0x8001f6 <__brkval>
 a14:	df 91       	pop	r29
 a16:	cf 91       	pop	r28
 a18:	08 95       	ret

00000a1a <strnlen_P>:
 a1a:	fc 01       	movw	r30, r24
 a1c:	05 90       	lpm	r0, Z+
 a1e:	61 50       	subi	r22, 0x01	; 1
 a20:	70 40       	sbci	r23, 0x00	; 0
 a22:	01 10       	cpse	r0, r1
 a24:	d8 f7       	brcc	.-10     	; 0xa1c <strnlen_P+0x2>
 a26:	80 95       	com	r24
 a28:	90 95       	com	r25
 a2a:	8e 0f       	add	r24, r30
 a2c:	9f 1f       	adc	r25, r31
 a2e:	08 95       	ret

00000a30 <memset>:
 a30:	dc 01       	movw	r26, r24
 a32:	01 c0       	rjmp	.+2      	; 0xa36 <memset+0x6>
 a34:	6d 93       	st	X+, r22
 a36:	41 50       	subi	r20, 0x01	; 1
 a38:	50 40       	sbci	r21, 0x00	; 0
 a3a:	e0 f7       	brcc	.-8      	; 0xa34 <memset+0x4>
 a3c:	08 95       	ret

00000a3e <strnlen>:
 a3e:	fc 01       	movw	r30, r24
 a40:	61 50       	subi	r22, 0x01	; 1
 a42:	70 40       	sbci	r23, 0x00	; 0
 a44:	01 90       	ld	r0, Z+
 a46:	01 10       	cpse	r0, r1
 a48:	d8 f7       	brcc	.-10     	; 0xa40 <strnlen+0x2>
 a4a:	80 95       	com	r24
 a4c:	90 95       	com	r25
 a4e:	8e 0f       	add	r24, r30
 a50:	9f 1f       	adc	r25, r31
 a52:	08 95       	ret

00000a54 <fputc>:
 a54:	0f 93       	push	r16
 a56:	1f 93       	push	r17
 a58:	cf 93       	push	r28
 a5a:	df 93       	push	r29
 a5c:	fb 01       	movw	r30, r22
 a5e:	23 81       	ldd	r18, Z+3	; 0x03
 a60:	21 fd       	sbrc	r18, 1
 a62:	03 c0       	rjmp	.+6      	; 0xa6a <fputc+0x16>
 a64:	8f ef       	ldi	r24, 0xFF	; 255
 a66:	9f ef       	ldi	r25, 0xFF	; 255
 a68:	2c c0       	rjmp	.+88     	; 0xac2 <fputc+0x6e>
 a6a:	22 ff       	sbrs	r18, 2
 a6c:	16 c0       	rjmp	.+44     	; 0xa9a <fputc+0x46>
 a6e:	46 81       	ldd	r20, Z+6	; 0x06
 a70:	57 81       	ldd	r21, Z+7	; 0x07
 a72:	24 81       	ldd	r18, Z+4	; 0x04
 a74:	35 81       	ldd	r19, Z+5	; 0x05
 a76:	42 17       	cp	r20, r18
 a78:	53 07       	cpc	r21, r19
 a7a:	44 f4       	brge	.+16     	; 0xa8c <fputc+0x38>
 a7c:	a0 81       	ld	r26, Z
 a7e:	b1 81       	ldd	r27, Z+1	; 0x01
 a80:	9d 01       	movw	r18, r26
 a82:	2f 5f       	subi	r18, 0xFF	; 255
 a84:	3f 4f       	sbci	r19, 0xFF	; 255
 a86:	31 83       	std	Z+1, r19	; 0x01
 a88:	20 83       	st	Z, r18
 a8a:	8c 93       	st	X, r24
 a8c:	26 81       	ldd	r18, Z+6	; 0x06
 a8e:	37 81       	ldd	r19, Z+7	; 0x07
 a90:	2f 5f       	subi	r18, 0xFF	; 255
 a92:	3f 4f       	sbci	r19, 0xFF	; 255
 a94:	37 83       	std	Z+7, r19	; 0x07
 a96:	26 83       	std	Z+6, r18	; 0x06
 a98:	14 c0       	rjmp	.+40     	; 0xac2 <fputc+0x6e>
 a9a:	8b 01       	movw	r16, r22
 a9c:	ec 01       	movw	r28, r24
 a9e:	fb 01       	movw	r30, r22
 aa0:	00 84       	ldd	r0, Z+8	; 0x08
 aa2:	f1 85       	ldd	r31, Z+9	; 0x09
 aa4:	e0 2d       	mov	r30, r0
 aa6:	09 95       	icall
 aa8:	89 2b       	or	r24, r25
 aaa:	e1 f6       	brne	.-72     	; 0xa64 <fputc+0x10>
 aac:	d8 01       	movw	r26, r16
 aae:	16 96       	adiw	r26, 0x06	; 6
 ab0:	8d 91       	ld	r24, X+
 ab2:	9c 91       	ld	r25, X
 ab4:	17 97       	sbiw	r26, 0x07	; 7
 ab6:	01 96       	adiw	r24, 0x01	; 1
 ab8:	17 96       	adiw	r26, 0x07	; 7
 aba:	9c 93       	st	X, r25
 abc:	8e 93       	st	-X, r24
 abe:	16 97       	sbiw	r26, 0x06	; 6
 ac0:	ce 01       	movw	r24, r28
 ac2:	df 91       	pop	r29
 ac4:	cf 91       	pop	r28
 ac6:	1f 91       	pop	r17
 ac8:	0f 91       	pop	r16
 aca:	08 95       	ret

00000acc <__ultoa_invert>:
 acc:	fa 01       	movw	r30, r20
 ace:	aa 27       	eor	r26, r26
 ad0:	28 30       	cpi	r18, 0x08	; 8
 ad2:	51 f1       	breq	.+84     	; 0xb28 <__ultoa_invert+0x5c>
 ad4:	20 31       	cpi	r18, 0x10	; 16
 ad6:	81 f1       	breq	.+96     	; 0xb38 <__ultoa_invert+0x6c>
 ad8:	e8 94       	clt
 ada:	6f 93       	push	r22
 adc:	6e 7f       	andi	r22, 0xFE	; 254
 ade:	6e 5f       	subi	r22, 0xFE	; 254
 ae0:	7f 4f       	sbci	r23, 0xFF	; 255
 ae2:	8f 4f       	sbci	r24, 0xFF	; 255
 ae4:	9f 4f       	sbci	r25, 0xFF	; 255
 ae6:	af 4f       	sbci	r26, 0xFF	; 255
 ae8:	b1 e0       	ldi	r27, 0x01	; 1
 aea:	3e d0       	rcall	.+124    	; 0xb68 <__ultoa_invert+0x9c>
 aec:	b4 e0       	ldi	r27, 0x04	; 4
 aee:	3c d0       	rcall	.+120    	; 0xb68 <__ultoa_invert+0x9c>
 af0:	67 0f       	add	r22, r23
 af2:	78 1f       	adc	r23, r24
 af4:	89 1f       	adc	r24, r25
 af6:	9a 1f       	adc	r25, r26
 af8:	a1 1d       	adc	r26, r1
 afa:	68 0f       	add	r22, r24
 afc:	79 1f       	adc	r23, r25
 afe:	8a 1f       	adc	r24, r26
 b00:	91 1d       	adc	r25, r1
 b02:	a1 1d       	adc	r26, r1
 b04:	6a 0f       	add	r22, r26
 b06:	71 1d       	adc	r23, r1
 b08:	81 1d       	adc	r24, r1
 b0a:	91 1d       	adc	r25, r1
 b0c:	a1 1d       	adc	r26, r1
 b0e:	20 d0       	rcall	.+64     	; 0xb50 <__ultoa_invert+0x84>
 b10:	09 f4       	brne	.+2      	; 0xb14 <__ultoa_invert+0x48>
 b12:	68 94       	set
 b14:	3f 91       	pop	r19
 b16:	2a e0       	ldi	r18, 0x0A	; 10
 b18:	26 9f       	mul	r18, r22
 b1a:	11 24       	eor	r1, r1
 b1c:	30 19       	sub	r19, r0
 b1e:	30 5d       	subi	r19, 0xD0	; 208
 b20:	31 93       	st	Z+, r19
 b22:	de f6       	brtc	.-74     	; 0xada <__ultoa_invert+0xe>
 b24:	cf 01       	movw	r24, r30
 b26:	08 95       	ret
 b28:	46 2f       	mov	r20, r22
 b2a:	47 70       	andi	r20, 0x07	; 7
 b2c:	40 5d       	subi	r20, 0xD0	; 208
 b2e:	41 93       	st	Z+, r20
 b30:	b3 e0       	ldi	r27, 0x03	; 3
 b32:	0f d0       	rcall	.+30     	; 0xb52 <__ultoa_invert+0x86>
 b34:	c9 f7       	brne	.-14     	; 0xb28 <__ultoa_invert+0x5c>
 b36:	f6 cf       	rjmp	.-20     	; 0xb24 <__ultoa_invert+0x58>
 b38:	46 2f       	mov	r20, r22
 b3a:	4f 70       	andi	r20, 0x0F	; 15
 b3c:	40 5d       	subi	r20, 0xD0	; 208
 b3e:	4a 33       	cpi	r20, 0x3A	; 58
 b40:	18 f0       	brcs	.+6      	; 0xb48 <__ultoa_invert+0x7c>
 b42:	49 5d       	subi	r20, 0xD9	; 217
 b44:	31 fd       	sbrc	r19, 1
 b46:	40 52       	subi	r20, 0x20	; 32
 b48:	41 93       	st	Z+, r20
 b4a:	02 d0       	rcall	.+4      	; 0xb50 <__ultoa_invert+0x84>
 b4c:	a9 f7       	brne	.-22     	; 0xb38 <__ultoa_invert+0x6c>
 b4e:	ea cf       	rjmp	.-44     	; 0xb24 <__ultoa_invert+0x58>
 b50:	b4 e0       	ldi	r27, 0x04	; 4
 b52:	a6 95       	lsr	r26
 b54:	97 95       	ror	r25
 b56:	87 95       	ror	r24
 b58:	77 95       	ror	r23
 b5a:	67 95       	ror	r22
 b5c:	ba 95       	dec	r27
 b5e:	c9 f7       	brne	.-14     	; 0xb52 <__ultoa_invert+0x86>
 b60:	00 97       	sbiw	r24, 0x00	; 0
 b62:	61 05       	cpc	r22, r1
 b64:	71 05       	cpc	r23, r1
 b66:	08 95       	ret
 b68:	9b 01       	movw	r18, r22
 b6a:	ac 01       	movw	r20, r24
 b6c:	0a 2e       	mov	r0, r26
 b6e:	06 94       	lsr	r0
 b70:	57 95       	ror	r21
 b72:	47 95       	ror	r20
 b74:	37 95       	ror	r19
 b76:	27 95       	ror	r18
 b78:	ba 95       	dec	r27
 b7a:	c9 f7       	brne	.-14     	; 0xb6e <__ultoa_invert+0xa2>
 b7c:	62 0f       	add	r22, r18
 b7e:	73 1f       	adc	r23, r19
 b80:	84 1f       	adc	r24, r20
 b82:	95 1f       	adc	r25, r21
 b84:	a0 1d       	adc	r26, r0
 b86:	08 95       	ret

00000b88 <__divmodsi4>:
 b88:	05 2e       	mov	r0, r21
 b8a:	97 fb       	bst	r25, 7
 b8c:	1e f4       	brtc	.+6      	; 0xb94 <__divmodsi4+0xc>
 b8e:	00 94       	com	r0
 b90:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__negsi2>
 b94:	57 fd       	sbrc	r21, 7
 b96:	07 d0       	rcall	.+14     	; 0xba6 <__divmodsi4_neg2>
 b98:	0e 94 2d 06 	call	0xc5a	; 0xc5a <__udivmodsi4>
 b9c:	07 fc       	sbrc	r0, 7
 b9e:	03 d0       	rcall	.+6      	; 0xba6 <__divmodsi4_neg2>
 ba0:	4e f4       	brtc	.+18     	; 0xbb4 <__divmodsi4_exit>
 ba2:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__negsi2>

00000ba6 <__divmodsi4_neg2>:
 ba6:	50 95       	com	r21
 ba8:	40 95       	com	r20
 baa:	30 95       	com	r19
 bac:	21 95       	neg	r18
 bae:	3f 4f       	sbci	r19, 0xFF	; 255
 bb0:	4f 4f       	sbci	r20, 0xFF	; 255
 bb2:	5f 4f       	sbci	r21, 0xFF	; 255

00000bb4 <__divmodsi4_exit>:
 bb4:	08 95       	ret

00000bb6 <__negsi2>:
 bb6:	90 95       	com	r25
 bb8:	80 95       	com	r24
 bba:	70 95       	com	r23
 bbc:	61 95       	neg	r22
 bbe:	7f 4f       	sbci	r23, 0xFF	; 255
 bc0:	8f 4f       	sbci	r24, 0xFF	; 255
 bc2:	9f 4f       	sbci	r25, 0xFF	; 255
 bc4:	08 95       	ret

00000bc6 <__muluhisi3>:
 bc6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__umulhisi3>
 bca:	a5 9f       	mul	r26, r21
 bcc:	90 0d       	add	r25, r0
 bce:	b4 9f       	mul	r27, r20
 bd0:	90 0d       	add	r25, r0
 bd2:	a4 9f       	mul	r26, r20
 bd4:	80 0d       	add	r24, r0
 bd6:	91 1d       	adc	r25, r1
 bd8:	11 24       	eor	r1, r1
 bda:	08 95       	ret

00000bdc <__mulshisi3>:
 bdc:	b7 ff       	sbrs	r27, 7
 bde:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__muluhisi3>

00000be2 <__mulohisi3>:
 be2:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__muluhisi3>
 be6:	82 1b       	sub	r24, r18
 be8:	93 0b       	sbc	r25, r19
 bea:	08 95       	ret

00000bec <__prologue_saves__>:
 bec:	2f 92       	push	r2
 bee:	3f 92       	push	r3
 bf0:	4f 92       	push	r4
 bf2:	5f 92       	push	r5
 bf4:	6f 92       	push	r6
 bf6:	7f 92       	push	r7
 bf8:	8f 92       	push	r8
 bfa:	9f 92       	push	r9
 bfc:	af 92       	push	r10
 bfe:	bf 92       	push	r11
 c00:	cf 92       	push	r12
 c02:	df 92       	push	r13
 c04:	ef 92       	push	r14
 c06:	ff 92       	push	r15
 c08:	0f 93       	push	r16
 c0a:	1f 93       	push	r17
 c0c:	cf 93       	push	r28
 c0e:	df 93       	push	r29
 c10:	cd b7       	in	r28, 0x3d	; 61
 c12:	de b7       	in	r29, 0x3e	; 62
 c14:	ca 1b       	sub	r28, r26
 c16:	db 0b       	sbc	r29, r27
 c18:	0f b6       	in	r0, 0x3f	; 63
 c1a:	f8 94       	cli
 c1c:	de bf       	out	0x3e, r29	; 62
 c1e:	0f be       	out	0x3f, r0	; 63
 c20:	cd bf       	out	0x3d, r28	; 61
 c22:	09 94       	ijmp

00000c24 <__epilogue_restores__>:
 c24:	2a 88       	ldd	r2, Y+18	; 0x12
 c26:	39 88       	ldd	r3, Y+17	; 0x11
 c28:	48 88       	ldd	r4, Y+16	; 0x10
 c2a:	5f 84       	ldd	r5, Y+15	; 0x0f
 c2c:	6e 84       	ldd	r6, Y+14	; 0x0e
 c2e:	7d 84       	ldd	r7, Y+13	; 0x0d
 c30:	8c 84       	ldd	r8, Y+12	; 0x0c
 c32:	9b 84       	ldd	r9, Y+11	; 0x0b
 c34:	aa 84       	ldd	r10, Y+10	; 0x0a
 c36:	b9 84       	ldd	r11, Y+9	; 0x09
 c38:	c8 84       	ldd	r12, Y+8	; 0x08
 c3a:	df 80       	ldd	r13, Y+7	; 0x07
 c3c:	ee 80       	ldd	r14, Y+6	; 0x06
 c3e:	fd 80       	ldd	r15, Y+5	; 0x05
 c40:	0c 81       	ldd	r16, Y+4	; 0x04
 c42:	1b 81       	ldd	r17, Y+3	; 0x03
 c44:	aa 81       	ldd	r26, Y+2	; 0x02
 c46:	b9 81       	ldd	r27, Y+1	; 0x01
 c48:	ce 0f       	add	r28, r30
 c4a:	d1 1d       	adc	r29, r1
 c4c:	0f b6       	in	r0, 0x3f	; 63
 c4e:	f8 94       	cli
 c50:	de bf       	out	0x3e, r29	; 62
 c52:	0f be       	out	0x3f, r0	; 63
 c54:	cd bf       	out	0x3d, r28	; 61
 c56:	ed 01       	movw	r28, r26
 c58:	08 95       	ret

00000c5a <__udivmodsi4>:
 c5a:	a1 e2       	ldi	r26, 0x21	; 33
 c5c:	1a 2e       	mov	r1, r26
 c5e:	aa 1b       	sub	r26, r26
 c60:	bb 1b       	sub	r27, r27
 c62:	fd 01       	movw	r30, r26
 c64:	0d c0       	rjmp	.+26     	; 0xc80 <__udivmodsi4_ep>

00000c66 <__udivmodsi4_loop>:
 c66:	aa 1f       	adc	r26, r26
 c68:	bb 1f       	adc	r27, r27
 c6a:	ee 1f       	adc	r30, r30
 c6c:	ff 1f       	adc	r31, r31
 c6e:	a2 17       	cp	r26, r18
 c70:	b3 07       	cpc	r27, r19
 c72:	e4 07       	cpc	r30, r20
 c74:	f5 07       	cpc	r31, r21
 c76:	20 f0       	brcs	.+8      	; 0xc80 <__udivmodsi4_ep>
 c78:	a2 1b       	sub	r26, r18
 c7a:	b3 0b       	sbc	r27, r19
 c7c:	e4 0b       	sbc	r30, r20
 c7e:	f5 0b       	sbc	r31, r21

00000c80 <__udivmodsi4_ep>:
 c80:	66 1f       	adc	r22, r22
 c82:	77 1f       	adc	r23, r23
 c84:	88 1f       	adc	r24, r24
 c86:	99 1f       	adc	r25, r25
 c88:	1a 94       	dec	r1
 c8a:	69 f7       	brne	.-38     	; 0xc66 <__udivmodsi4_loop>
 c8c:	60 95       	com	r22
 c8e:	70 95       	com	r23
 c90:	80 95       	com	r24
 c92:	90 95       	com	r25
 c94:	9b 01       	movw	r18, r22
 c96:	ac 01       	movw	r20, r24
 c98:	bd 01       	movw	r22, r26
 c9a:	cf 01       	movw	r24, r30
 c9c:	08 95       	ret

00000c9e <__umulhisi3>:
 c9e:	a2 9f       	mul	r26, r18
 ca0:	b0 01       	movw	r22, r0
 ca2:	b3 9f       	mul	r27, r19
 ca4:	c0 01       	movw	r24, r0
 ca6:	a3 9f       	mul	r26, r19
 ca8:	70 0d       	add	r23, r0
 caa:	81 1d       	adc	r24, r1
 cac:	11 24       	eor	r1, r1
 cae:	91 1d       	adc	r25, r1
 cb0:	b2 9f       	mul	r27, r18
 cb2:	70 0d       	add	r23, r0
 cb4:	81 1d       	adc	r24, r1
 cb6:	11 24       	eor	r1, r1
 cb8:	91 1d       	adc	r25, r1
 cba:	08 95       	ret

00000cbc <_exit>:
 cbc:	f8 94       	cli

00000cbe <__stop_program>:
 cbe:	ff cf       	rjmp	.-2      	; 0xcbe <__stop_program>
